services:
  # PostgreSQL Database Service
  db:
    image: postgres:18-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-noteapp}
      POSTGRES_USER: ${POSTGRES_USER:-noteuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-notepass123}
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Message Broker Service
  redis:
    image: redis:6-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Django Web Server Service (Production)
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      DEBUG: "False"
      SECRET_KEY: ${SECRET_KEY:-django-insecure-production-key-change-me}
      POSTGRES_DB: ${POSTGRES_DB:-noteapp}
      POSTGRES_USER: ${POSTGRES_USER:-noteuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-notepass123}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      REDIS_URL: redis://redis:6379/0
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,web,frontend}
    volumes:
      - media_files:/app/media
      - static_files:/app/staticfiles
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker Service
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A config worker -l info --concurrency=2
    env_file:
      - ./.env
    environment:
      DEBUG: "False"
      SECRET_KEY: ${SECRET_KEY:-django-insecure-production-key-change-me}
      POSTGRES_DB: ${POSTGRES_DB:-noteapp}
      POSTGRES_USER: ${POSTGRES_USER:-noteuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-notepass123}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      REDIS_URL: redis://redis:6379/0
    volumes:
      - media_files:/app/media
    networks:
      - app-network
    depends_on:
      - web
      - db
      - redis
    restart: unless-stopped

  # React Frontend Service (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    networks:
      - app-network
    depends_on:
      - web
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (Optional - for multiple web instances)
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - frontend
  #   networks:
  #     - app-network
  #   restart: unless-stopped

# Named volumes to persist data
volumes:
  postgres_data:
  redis_data:
  media_files:
  static_files:

# Custom network for service communication
networks:
  app-network:
    driver: bridge